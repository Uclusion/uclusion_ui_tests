import _ from 'lodash';
import {getSummariesInfo, loginUserToAccount, loginUserToMarket} from "./uclusion_backend";
import {Auth} from "aws-amplify";


const DELETION_TIMEOUT = 60000; // wait 60 seconds to delete a market

export function sleep(ms) {
    return new Promise(resolve => {
        setTimeout(resolve, ms);
    })
}

export function deleteCognitoUser(userConfiguration) {
    return Auth.signIn(userConfiguration.username, userConfiguration.password)
        .then(() => {
            console.log(`Logged in user ${userConfiguration.username}`);
        })
        .then(() => {
            return Auth.currentAuthenticatedUser()
                .then((user) => user.deleteUser(() => {}))
        })
        .then(() => console.log(`deleted user ${userConfiguration.username}`))
        .then(() => Auth.signOut())
        .catch((error) => {
            console.error(error);
            console.log(`failed to delete user with credentials ${userConfiguration.username} and password: ${userConfiguration.password}`);
            return Auth.signOut();
        });
}

/**
 * Sets up a blank workspace and group with the given names containing the given users
 * The users presented must be of the form generated by "prepareUsersForTest"
 * The first user in the users array will be the workspace creator.
 * It assumes the users have not already signed up
 * @param destination the server we're going to
 * @param workspaceName the name of the workspace
 * @param groupName the name of the group in the workpace
 * @param users the users inside the workspace
 */
export async function prepareWorkspaceAndGroup(destination, workspaceName, groupName, users) {
    const testStartDate = new Date();
    const promises = users.forEach((user) => {
        cy.fillSignupForm(destination, user.name, user.username, user.password);
        cy.waitForEmail(user.username, destination, 'Please verify your email address', testStartDate).then((url) => {
            cy.signIn(url, user.username, user.password);
            cy.logout();
        });
    });
    return Promise.all(promises);
}

export function cleanAccount(userConfiguration) {
    const promise = getSummariesInfo(userConfiguration);
    return promise.then((summariesInfo) => {
        const {summariesClient, idToken} = summariesInfo;
        return summariesClient.idList(idToken).then((audits) => {
            if (_.isEmpty(audits)) {
                return {signatures: []};
            }
            const allMarkets = audits.map((audit) => audit.id);
            const chunks = _.chunk(allMarkets, 24);
            const versionPromises = chunks.map((chunk) => {
                return summariesClient.versions(idToken, chunk).then((versions) => {
                    const {signatures} = versions;
                    const deletions = signatures.map((signature) => {
                        const {market_id: marketId} = signature;
                        let globalClient;
                        return loginUserToMarket(userConfiguration, marketId)
                            .then((client) => {
                                globalClient = client;
                                return client.markets.get();
                            }).then((market) => {
                                const {created_by: createdBy, current_user_id: currentUserId} = market;
                                console.log(`For ${currentUserId} and ${createdBy} deleting ${JSON.stringify(market)}`);
                                return globalClient.markets.deleteMarket();
                            });
                    });
                    if (deletions) {
                        deletions.push(sleep(DELETION_TIMEOUT));
                    }
                    return Promise.all(deletions);
                });
            });
            return Promise.all(versionPromises);
        })
            .then(() => loginUserToAccount(userConfiguration))
            .then((client) => client.users.cleanAccount())
            // cleanup cognito session otherwise we're still signed in (the sdk uses the same storage as the webapp)
            .then(() => Auth.signOut())
            .then(() => console.log('Done with cleanup'));
    });
}